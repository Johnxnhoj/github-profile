{"version":3,"sources":["redux/ducks/users/index.js","components/Home.js","components/App.js","lib/serviceWorker.js","redux/store.js","index.js"],"names":["initialState","users","state","action","type","payload","getUsers","dispatch","axios","get","then","resp","data","props","className","id","href","App","useSelector","appState","userState","useDispatch","useEffect","useUsers","console","log","exact","path","component","Home","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","reducers","enhancer","applyMiddleware","thunk","store","createStore","Main","children","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"42BAKA,IAGMA,EAAe,CACnBC,MAAO,IAIM,aAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCAC/C,OAAQA,EAAOC,MACb,IAVc,kBAWZ,OAAO,EAAP,GAAYF,EAAZ,CAAmBD,MAAOE,EAAOE,UACnC,QACE,OAAOH,IAKPI,EAAW,WACf,OAAO,SAAAC,GACLC,IAAMC,IAAI,UAAUC,MAAK,SAAAC,GACvBJ,EAAS,CACPH,KAtBU,kBAuBVC,QAASM,EAAKC,Y,mBCzBP,WAAAC,GACb,OACE,yBAAKC,UAAU,aACb,4BAAQC,GAAG,QACT,yBAAKD,UAAU,QAAf,QACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QAAf,wEAKJ,yBAAKA,UAAU,UACb,yBAAKC,GAAG,UACN,uBAAGC,KAAK,SAAR,QACA,uBAAGA,KAAK,UAAR,SACA,uBAAGA,KAAK,aAAR,YACA,uBAAGA,KAAK,YAAR,aAGJ,8BACE,yBAAKF,UAAU,OAAOC,GAAG,SAAzB,SAGA,yBAAKD,UAAU,OAAOC,GAAG,YAAzB,YAGA,yBAAKD,UAAU,OAAOC,GAAG,WAAzB,YAIF,4CChBSE,MAZf,WAAgB,IACNhB,EF6BH,WACL,IAAMA,EAAQiB,aAAY,SAAAC,GAAQ,OAAIA,EAASC,UAAUnB,SACnDM,EAAWc,cAMjB,OAJAC,qBAAU,WACRf,EAASD,OACR,CAACC,IAEG,CAAEN,SErCSsB,GAAVtB,MAIR,OAFAuB,QAAQC,IAAIxB,GAGV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,IAAIC,UAAWC,MCAnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCdAC,EAAmBJ,OAAOK,sCAAwCC,IAClEC,EAAcC,YAAgBC,GAC9BC,EAAWN,EAAiBO,YAAgBC,MAInCC,EAFDC,YAAYP,EAAaG,GCAjCK,EAAO,SAAAjC,GACX,OAAO,kBAAC,IAAD,CAAU+B,MAAOA,GAAQ/B,EAAMkC,WAGxCC,IAASC,OACP,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,gBE3GJV,c","file":"static/js/main.39cb3f45.chunk.js","sourcesContent":["import { useEffect } from \"react\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport axios from \"axios\"\n\n// action definitions\nconst GET_USERS = \"users/GET_USERS\"\n\n// initial state\nconst initialState = {\n  users: []\n}\n\n// reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_USERS:\n      return { ...state, users: action.payload }\n    default:\n      return state\n  }\n}\n\n// action creators\nconst getUsers = () => {\n  return dispatch => {\n    axios.get(\"/users\").then(resp => {\n      dispatch({\n        type: GET_USERS,\n        payload: resp.data\n      })\n    })\n  }\n}\n\n// custom hooks\nexport function useUsers() {\n  const users = useSelector(appState => appState.userState.users)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(getUsers())\n  }, [dispatch])\n\n  return { users }\n}\n","import React from \"react\"\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\"\n\nexport default props => {\n  return (\n    <div className=\"Container\">\n      <header id=\"Home\">\n        <div className=\"Logo\">Logo</div>\n        <div className=\"content\">\n          <div className=\"Name\">\n            Hey, my name is John Carbajal, and i am a full stack web developer\n          </div>\n        </div>\n      </header>\n      <div className=\"NavBar\">\n        <div id=\"NavCon\">\n          <a href=\"#Home\">HOME</a>\n          <a href=\"#About\">ABOUT</a>\n          <a href=\"#Profolio\">PROFOLIO</a>\n          <a href=\"#Contact\">CONTACT</a>\n        </div>\n      </div>\n      <main>\n        <div className=\"Page\" id=\"About\">\n          About\n        </div>\n        <div className=\"Page\" id=\"Profolio\">\n          Profolio\n        </div>\n        <div className=\"Page\" id=\"Contact\">\n          Contact\n        </div>\n      </main>\n      <footer>footer</footer>\n    </div>\n  )\n}\n","import React from \"react\"\nimport { useUsers } from \"../hooks\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport Home from \"./Home\"\n\nfunction App() {\n  const { users } = useUsers()\n\n  console.log(users)\n\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Home} />\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport * as reducers from \"./ducks\"\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst rootReducer = combineReducers(reducers)\nconst enhancer = composeEnhancers(applyMiddleware(thunk))\n\nconst store = createStore(rootReducer, enhancer)\n\nexport default store\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./styles/base.css\"\nimport App from \"./components/App\"\nimport * as serviceWorker from \"./lib/serviceWorker\"\nimport { Provider } from \"react-redux\"\nimport store from \"./redux/store\"\n\nconst Main = props => {\n  return <Provider store={store}>{props.children}</Provider>\n}\n\nReactDOM.render(\n  <Main>\n    <App />\n  </Main>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n\nexport default Main\n"],"sourceRoot":""}